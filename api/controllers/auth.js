import User from "../models/User.js";
import bcrypt from "bcryptjs";
import { createError } from "../utils/error.js";
import jwt from "jsonwebtoken";

export const register = async (req, res, next) => {
  try {
    const salt = bcrypt.genSaltSync(10);
    const hash = bcrypt.hashSync(req.body.password, salt);    //from the bcrypt library

    const newUser = new User({
      ...req.body,
      password: hash,
    });

    await newUser.save();
    res.status(200).send("User has been created.");
  } catch (err) 
  { next(err); }
};
/*
...req.body takes all properties in the form

New request for register will be created in insomnia for API testing
URL: localhost:8800/api/auth/register
{
  "username":"John",
  "email":"john@gmail.com",
  "password":"12345"
}
*/

export const login = async (req, res, next) => {
  try {
    const user = await User.findOne({ username: req.body.username });   //This request is to find out if the user intending to login had initially registered
    if (!user) return next(createError(404, "User not found!"));    //if the request finds out the login is not from the user, it returns the error message

    const isPasswordCorrect = await bcrypt.compare(   //This 
      req.body.password,
      user.password
    );
    if (!isPasswordCorrect)
    return next(createError(400, "Wrong password or username!"));

    const token = jwt.sign(
      { id: user._id, isAdmin: user.isAdmin },      //To generate random secret key, go to https://randomkeygen.com/ and scroll down to CodeIgniter Encryption Keys. Thenafter, copy any of the keys. Meanwhile, new keys can be generated by clicking on the generate button above
      process.env.JWT     //This goes into, searches the .env file and then picks the object with JWT
    );
      
    const { password, isAdmin, ...otherDetails } = user._doc;
    res
      .cookie("access_token", token, {
        httpOnly: true,
      })
    .status(200)
    .json({ details: { ...otherDetails }, isAdmin });
  } catch (err) 
  { next(err); }
};

/*
Line 44: id was indicated as user._id because the database saved as the user as _id
New request for register will be created in insomnia for API testing
URL: localhost:8800/api/auth/login
{
  "username":"John",
  "password":"12345"
}     since these login details tally with the record of a sign up, it'd return successful and if it's otherwise, it means the login detail is wrong
*/
